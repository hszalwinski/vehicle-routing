Teza i cel pracy:

Cel VRP:
Zaprojektowanie optymalnego zbioru ścieżek dla floty pojazdów mających za zadanie odwiedzić wszystkich klientów i wrócić do bazy.
Przykład: kurier, skupy runa leśnego
Zajawka - rodzaje VRP:
* symetryczny / niesymetryczny - koszty 'do' i 'z'
* ładowność i zasięg samochodu
* minimalny poziom ładowności
* tylko jedna wizyta po odbiór towaru
* maksymalny czas pracy kierowcy
* wiele punktów depozytu
* opcjonalne węzły
* odwiedzanie cykliczne

TSP:
Najprostszy przypadek VRP. 1 pojazd, 1 baza, brak dodatkowych ograniczeń
Jaka najkrótsza ścieżka?
Poglądowy graf nieskierowany -> skierowany z najkrótszą odległością == macierz odległości

MapMapker - zaimportować do locations.csv
1. Uruchomić csv_to_json.py - pokazać wynik
2. Potrzebujemy macierzy odległości. CLI - Pipfile co zostało użyte?

python vrp.py
python vrp.py distance-matrix --help

https://developers.google.com/maps/documentation/distance-matrix/intro#DistanceMatrixRequests

Stworzyć dm z pliku z lokalizacjami.
python vrp.py distance-matrix -i workshop/locations.json -oc workshop/dm.csv -op workshop/dm.pickle
source workshop/key.sh

3. Uruchomić algorytmy i opowiedzieć o nich, pokazać konfigurację
python vrp.py scan-all -d workshop/dm.pickle -c workshop/config.json -v workshop/vehicles.json -o workshop/results/scan-all.csv
python vrp.py ortools -d workshop/dm.pickle -c workshop/config.json -v workshop/vehicles.json -o workshop/results/or-tools.csv
python vrp.py genetic -d workshop/dm.pickle -c workshop/config.json -v workshop/vehicles.json -o workshop/results/genetic.csv
python vrp.py simulated-annealing -d workshop/dm.pickle -c workshop/config.json -v workshop/vehicles.json -o workshop/results/simulated-annealing.csv

4. Uruchomić symulację
python vrp.py simulation -al genetic -i 30 -d workshop/dm.pickle -c workshop/config.json -v workshop/vehicles.json -o workshop/results/genetic.csv

5. Skopiować wyniki do listy w scratchu i znaleźć min. Skopiować najlepszą sekwencję do result_to_csv.py.
Wkleić do mapmakera.com.

6. Pokazać folder data

7. Pokazać diagramy i podsumowanie.

• Aktualne komputery nie poprawią znacząco wyników w rozwiązywaniu skomplikowanych problemów marszrutyzacji
bez postępów w algorytmach. Złożoność rozwiązań przy pomocy brute-force ilustruje jak szybko zadania marszrutyzacji
stają się nierozwiązywalne w sensownym czasie.

• Generalnie im prostszy algorytm tym gorsze rezultaty. Symulowane wyżarzanie i brute-force nie były w stanie osiągnąć
akceptowalnej jakości rozwiązań dla trudniejszych przypadków. Ich świetne rezultaty dla prostszych przypadków przeważnie
nie mają zastosowania w życiu.

• Budowanie niezawodnych rozwiązań wymaga dużo pracy. Biblioteka OR Tools została stworzona przez jedną z największych
korporacji na globie i pochłonęła dużo wysiłków aby osiągnąć wysoką jakość. Z drugiej strony, algorytm genetyczny
zaimplementowany na potrzeby moich badań pokazał, że nawet jedna osoba jest w stanie osiągnąć zadowalające wyniki, mimo iż
są one gorsze od wyników OR Tools. Niemniej jednak implementacja algorytmu genetycznego była trudniejsza niż implementacja
symulowanego wyżarzania.